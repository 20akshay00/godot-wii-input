<?xml version="1.0" encoding="UTF-8" ?>
<class name="GDWiimoteServer" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		An engine singleton for handling multiple Wiimote controllers.
	</brief_description>
	<description>
		The [GDWiimoteServer] object manages Wiimote interactions during the session. It handles connecting, disconnecting, and polling multiple Wiimotes, providing access to their features through the [GDWiimote] class.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="disconnect_wiimotes">
			<return type="void" />
			<description>
				Disconnect all currently connected Wiimotes. This will stop any ongoing polling and release resources associated with the Wiimotes.
			</description>
		</method>
		<method name="finalize_connection">
			<return type="GDWiimote[]" />
			<description>
				Finalize the connection process and return an array of connected [GDWiimote] instances. This method should be called after [method connect_wiimotes] to retrieve the connected Wiimotes. 
				[b]Note:[/b] This method is not blocking, so it may be called on the main thread.
			</description>
		</method>
		<method name="get_connected_wiimotes" qualifiers="const">
			<return type="GDWiimote[]" />
			<description>
				Get an array of currently connected [GDWiimote] instances. This will include all Wiimotes that have been successfully connected and initialized.
			</description>
		</method>
		<method name="initialize_connection">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="poll">
			<return type="void" />
			<description>
				Manually poll the state of all Wiimotes. This is useful if you want to poll mid-frame or have a custom main loop, as the default polling connects to the scene tree.
			</description>
		</method>
		<method name="start_polling">
			<return type="void" />
			<description>
				Start polling the connected Wiimotes for input data. This will enable the Wiimotes to send updates about their state, such as button presses and motion data. [b]Polling is enabled by default.[/b]
			</description>
		</method>
		<method name="stop_polling">
			<return type="void" />
			<description>
				Stop polling the connected Wiimotes. This will pause the updates from the Wiimotes, preventing any further input data from being processed until polling is restarted with [method start_polling].
			</description>
		</method>
	</methods>
	<members>
		<member name="max_wiimotes" type="int" setter="set_max_wiimotes" getter="get_max_wiimotes" default="4">
		</member>
	</members>
</class>
