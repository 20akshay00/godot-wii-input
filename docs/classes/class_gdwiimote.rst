:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/../godot-wii-input/doc_classes/GDWiimote.xml.

.. _class_GDWiimote:

GDWiimote
=========

**Inherits:** ``RefCounted``

A container for the Wiimote controller, providing access to its features such as motion sensing, LED control, and Nunchuk accessory management.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_accel<class_GDWiimote_method_get_accel>`\ (\ ) |const|                                                      |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``float``      | :ref:`get_battery_level<class_GDWiimote_method_get_battery_level>`\ (\ ) |const|                                      |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Quaternion`` | :ref:`get_fusion_orientation<class_GDWiimote_method_get_fusion_orientation>`\ (\ )                                    |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``bool``       | :ref:`get_led<class_GDWiimote_method_get_led>`\ (\ led_index\: ``int``\ ) |const|                                     |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_nunchuk_accel<class_GDWiimote_method_get_nunchuk_accel>`\ (\ ) |const|                                      |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_nunchuk_raw_accel<class_GDWiimote_method_get_nunchuk_raw_accel>`\ (\ ) |const|                              |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_nunchuk_raw_orientation<class_GDWiimote_method_get_nunchuk_raw_orientation>`\ (\ ) |const|                  |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_nunchuk_smoothed_orientation<class_GDWiimote_method_get_nunchuk_smoothed_orientation>`\ (\ ) |const|        |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector2``    | :ref:`get_player_space_gyro<class_GDWiimote_method_get_player_space_gyro>`\ (\ yaw_relax_factor\: ``float``\ )        |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_processed_accel<class_GDWiimote_method_get_processed_accel>`\ (\ )                                          |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_raw_accel<class_GDWiimote_method_get_raw_accel>`\ (\ ) |const|                                              |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_raw_gyro<class_GDWiimote_method_get_raw_gyro>`\ (\ ) |const|                                                |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_raw_orientation<class_GDWiimote_method_get_raw_orientation>`\ (\ ) |const|                                  |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector3``    | :ref:`get_smoothed_orientation<class_GDWiimote_method_get_smoothed_orientation>`\ (\ ) |const|                        |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``Vector2``    | :ref:`get_world_space_gyro<class_GDWiimote_method_get_world_space_gyro>`\ (\ side_reduction_threshold\: ``float``\ )  |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`initialize_nunchuk<class_GDWiimote_method_initialize_nunchuk>`\ (\ )                                            |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | ``bool``       | :ref:`is_nunchuk_connected<class_GDWiimote_method_is_nunchuk_connected>`\ (\ ) |const|                                |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`pulse_rumble<class_GDWiimote_method_pulse_rumble>`\ (\ duration_msec\: ``float``\ )                             |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`reset_gyro_calibration<class_GDWiimote_method_reset_gyro_calibration>`\ (\ )                                    |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_accel_threshold<class_GDWiimote_method_set_accel_threshold>`\ (\ threshold\: ``int``\ )                     |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_gyro_calibration_mode<class_GDWiimote_method_set_gyro_calibration_mode>`\ (\ mode\: ``int``\ )              |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_leds<class_GDWiimote_method_set_leds>`\ (\ led_indices\: ``Array``\ )                                       |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_motion_plus<class_GDWiimote_method_set_motion_plus>`\ (\ enable\: ``bool``\ )                               |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_motion_processing<class_GDWiimote_method_set_motion_processing>`\ (\ enable\: ``bool``\ )                   |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_motion_sensing<class_GDWiimote_method_set_motion_sensing>`\ (\ enable\: ``bool``\ )                         |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_nunchuk_accel_threshold<class_GDWiimote_method_set_nunchuk_accel_threshold>`\ (\ threshold\: ``int``\ )     |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_nunchuk_joystick_deadzone<class_GDWiimote_method_set_nunchuk_joystick_deadzone>`\ (\ dz\: ``float``\ )      |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_nunchuk_joystick_threshold<class_GDWiimote_method_set_nunchuk_joystick_threshold>`\ (\ dt\: ``float``\ )    |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_nunchuk_orient_threshold<class_GDWiimote_method_set_nunchuk_orient_threshold>`\ (\ threshold\: ``float``\ ) |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_orient_threshold<class_GDWiimote_method_set_orient_threshold>`\ (\ threshold\: ``float``\ )                 |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`set_rumble<class_GDWiimote_method_set_rumble>`\ (\ enabled\: ``bool``\ )                                        |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`start_gyro_calibration<class_GDWiimote_method_start_gyro_calibration>`\ (\ )                                    |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`start_nunchuk_joystick_calibration<class_GDWiimote_method_start_nunchuk_joystick_calibration>`\ (\ )            |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`stop_gyro_calibration<class_GDWiimote_method_stop_gyro_calibration>`\ (\ )                                      |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`stop_nunchuk_joystick_calibration<class_GDWiimote_method_stop_nunchuk_joystick_calibration>`\ (\ )              |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+
   | |void|         | :ref:`toggle_rumble<class_GDWiimote_method_toggle_rumble>`\ (\ )                                                      |
   +----------------+-----------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_GDWiimote_signal_nunchuk_inserted:

.. rst-class:: classref-signal

**nunchuk_inserted**\ (\ device_id\: ``int``\ ) :ref:`🔗<class_GDWiimote_signal_nunchuk_inserted>`

Emitted when a Nunchuk accessory is connected to the Wiimote. The ``device_id`` parameter indicates which Wiimote the Nunchuk is connected to. This is not reliable in the middle of an ongoing session.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_signal_nunchuk_removed:

.. rst-class:: classref-signal

**nunchuk_removed**\ (\ device_id\: ``int``\ ) :ref:`🔗<class_GDWiimote_signal_nunchuk_removed>`

Emitted when a Nunchuk accessory is disconnected from the Wiimote. The ``device_id`` parameter indicates which Wiimote the Nunchuk was connected to. This is not reliable in the middle of an ongoing session.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_signal_wiimote_disconnected:

.. rst-class:: classref-signal

**wiimote_disconnected**\ (\ device_id\: ``int``\ ) :ref:`🔗<class_GDWiimote_signal_wiimote_disconnected>`

Emitted when a Wiimote is disconnected. The ``device_id`` parameter indicates which Wiimote was disconnected. This is not reliable in the middle of an ongoing session.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_GDWiimote_method_get_accel:

.. rst-class:: classref-method

``Vector3`` **get_accel**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_accel>`

Get the current acceleration data along the X, Y, and Z axes in G-force units (1G = 9.81 m/s^2).

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_battery_level:

.. rst-class:: classref-method

``float`` **get_battery_level**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_battery_level>`

Get the battery level of the Wiimote, as a percentage (0-100).

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_fusion_orientation:

.. rst-class:: classref-method

``Quaternion`` **get_fusion_orientation**\ (\ ) :ref:`🔗<class_GDWiimote_method_get_fusion_orientation>`

Get the current orientation of the Wiimote as a quaternion. This is calculated using the accelerometer and gyroscope data.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_led:

.. rst-class:: classref-method

``bool`` **get_led**\ (\ led_index\: ``int``\ ) |const| :ref:`🔗<class_GDWiimote_method_get_led>`

Get whether a specific LED is on or off. Indices are 1-4.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_nunchuk_accel:

.. rst-class:: classref-method

``Vector3`` **get_nunchuk_accel**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_nunchuk_accel>`

Get the current acceleration data from the Nunchuk accessory along the X, Y, and Z axes in G-force units (1G = 9.81 m/s^2).

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_nunchuk_raw_accel:

.. rst-class:: classref-method

``Vector3`` **get_nunchuk_raw_accel**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_nunchuk_raw_accel>`

Get the current raw acceleration data from the Nunchuk accessory along the X, Y, and Z axes.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_nunchuk_raw_orientation:

.. rst-class:: classref-method

``Vector3`` **get_nunchuk_raw_orientation**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_nunchuk_raw_orientation>`

Get the current raw tilt data computed from the acceleration data of the Nunchuk accessory. The values represent the yaw, pitch and roll angles in degrees.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_nunchuk_smoothed_orientation:

.. rst-class:: classref-method

``Vector3`` **get_nunchuk_smoothed_orientation**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_nunchuk_smoothed_orientation>`

Get the current smoothed tilt data computed from the acceleration data of the Nunchuk accessory. The values represent the yaw, pitch and roll angles in degrees, smoothed over time to reduce noise.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_player_space_gyro:

.. rst-class:: classref-method

``Vector2`` **get_player_space_gyro**\ (\ yaw_relax_factor\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_get_player_space_gyro>`

Check `{GamepadMotionHelpers' documentation} <{https://github.com/JibbSmart/GamepadMotionHelpers}>`__ for more information on how to use this method.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_processed_accel:

.. rst-class:: classref-method

``Vector3`` **get_processed_accel**\ (\ ) :ref:`🔗<class_GDWiimote_method_get_processed_accel>`

Get the current acceleration data with gravity subtracted, along the X, Y, and Z axes in G-force units (1G = 9.81 m/s^2).

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_raw_accel:

.. rst-class:: classref-method

``Vector3`` **get_raw_accel**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_raw_accel>`

Get the current raw acceleration data along the X, Y, and Z axes. Not sure what units.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_raw_gyro:

.. rst-class:: classref-method

``Vector3`` **get_raw_gyro**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_raw_gyro>`

Get the current gyroscope data from the Wiimote, if available. The values represent the angular velocity corresponding to the yaw, pitch and roll angles in degrees per second.

\ **Note:** This method only returns data if the Wiimote is using a MotionPlus accessory or has built-in gyroscope support. In such a case, :ref:`set_motion_plus()<class_GDWiimote_method_set_motion_plus>` should be enabled first.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_raw_orientation:

.. rst-class:: classref-method

``Vector3`` **get_raw_orientation**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_raw_orientation>`

Get the current raw tilt data computed from the acceleration data of the Wiimote. The values represent the yaw, pitch and roll angles in degrees.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_smoothed_orientation:

.. rst-class:: classref-method

``Vector3`` **get_smoothed_orientation**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_get_smoothed_orientation>`

Get the current smoothed tilt data computed from the acceleration data of the Wiimote. The values represent the yaw, pitch and roll angles in degrees, smoothed over time to reduce noise.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_get_world_space_gyro:

.. rst-class:: classref-method

``Vector2`` **get_world_space_gyro**\ (\ side_reduction_threshold\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_get_world_space_gyro>`

Check `{GamepadMotionHelpers' documentation} <{https://github.com/JibbSmart/GamepadMotionHelpers}>`__ for more information on how to use this method.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_initialize_nunchuk:

.. rst-class:: classref-method

|void| **initialize_nunchuk**\ (\ ) :ref:`🔗<class_GDWiimote_method_initialize_nunchuk>`

Initialize the Nunchuk accessory with default calibration values. This should be called immediately after the Nunchuk is connected.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_is_nunchuk_connected:

.. rst-class:: classref-method

``bool`` **is_nunchuk_connected**\ (\ ) |const| :ref:`🔗<class_GDWiimote_method_is_nunchuk_connected>`

Check if the Nunchuk accessory is connected to the Wiimote.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_pulse_rumble:

.. rst-class:: classref-method

|void| **pulse_rumble**\ (\ duration_msec\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_pulse_rumble>`

Pulse the rumble motor for a specified duration in *milliseconds*.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_reset_gyro_calibration:

.. rst-class:: classref-method

|void| **reset_gyro_calibration**\ (\ ) :ref:`🔗<class_GDWiimote_method_reset_gyro_calibration>`

Reset the previously computed gyroscope calibration data.

\ **Note:** This requires enabling motion processing.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_accel_threshold:

.. rst-class:: classref-method

|void| **set_accel_threshold**\ (\ threshold\: ``int``\ ) :ref:`🔗<class_GDWiimote_method_set_accel_threshold>`

Set a threshold used to determine when a change in the Wiimote's acceleration is reported. The threshold indicates the decimal place that should be considered a significant change.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_gyro_calibration_mode:

.. rst-class:: classref-method

|void| **set_gyro_calibration_mode**\ (\ mode\: ``int``\ ) :ref:`🔗<class_GDWiimote_method_set_gyro_calibration_mode>`

Set the gyroscope calibration mode. The ``mode`` parameter can be one of the following:

- 0: ``CalibrationMode::Manual`` - No auto-calibration. This is the default.

- 1: ``CalibrationMode::Stillness`` - CalibrationMode::Stillnes

- 2: ``CalibrationMode::SensorFusion`` - Calculate an angular velocity from changes in the gravity direction as detected by the accelerometer.

Check `{GamepadMotionHelpers' documentation} <{https://github.com/JibbSmart/GamepadMotionHelpers}>`__ for more information

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_leds:

.. rst-class:: classref-method

|void| **set_leds**\ (\ led_indices\: ``Array``\ ) :ref:`🔗<class_GDWiimote_method_set_leds>`

Set the state of the LEDs on the Wiimote. The ``led_indices`` array should contain integers representing the LED indices (1-4) that should be turned on. If an index is not included, that LED will be turned off.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_motion_plus:

.. rst-class:: classref-method

|void| **set_motion_plus**\ (\ enable\: ``bool``\ ) :ref:`🔗<class_GDWiimote_method_set_motion_plus>`

Enable or disable reporting of gyroscope data. Used to save power when motion plus sensing is not needed.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_motion_processing:

.. rst-class:: classref-method

|void| **set_motion_processing**\ (\ enable\: ``bool``\ ) :ref:`🔗<class_GDWiimote_method_set_motion_processing>`

Enable or disable the processing of motion data using GamepadMotionHelper utilities. When enabled, :ref:`get_fusion_orientation()<class_GDWiimote_method_get_fusion_orientation>`, :ref:`get_player_space_gyro()<class_GDWiimote_method_get_player_space_gyro>` and :ref:`get_world_space_gyro()<class_GDWiimote_method_get_world_space_gyro>` will return processed data.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_motion_sensing:

.. rst-class:: classref-method

|void| **set_motion_sensing**\ (\ enable\: ``bool``\ ) :ref:`🔗<class_GDWiimote_method_set_motion_sensing>`

Enable or disable reporting of acceleration and orientation data. Used to save power when motion sensing is not needed. See also :ref:`set_motion_plus()<class_GDWiimote_method_set_motion_plus>`.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_nunchuk_accel_threshold:

.. rst-class:: classref-method

|void| **set_nunchuk_accel_threshold**\ (\ threshold\: ``int``\ ) :ref:`🔗<class_GDWiimote_method_set_nunchuk_accel_threshold>`

Set a threshold used to determine when a change in the Nunchuk's acceleration is reported. See also :ref:`set_accel_threshold()<class_GDWiimote_method_set_accel_threshold>`.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_nunchuk_joystick_deadzone:

.. rst-class:: classref-method

|void| **set_nunchuk_joystick_deadzone**\ (\ dz\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_set_nunchuk_joystick_deadzone>`

Set the deadzone for the Nunchuk's joystick. This is the width of a cross-shaped area around the center of the joystick where movement is ignored.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_nunchuk_joystick_threshold:

.. rst-class:: classref-method

|void| **set_nunchuk_joystick_threshold**\ (\ dt\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_set_nunchuk_joystick_threshold>`

Set the threshold for the Nunchuk's joystick. This is the minimum distance the joystick must move from its previous position before a change is reported.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_nunchuk_orient_threshold:

.. rst-class:: classref-method

|void| **set_nunchuk_orient_threshold**\ (\ threshold\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_set_nunchuk_orient_threshold>`

Set a threshold used to determine when a change in the Nunchuk's orientation is reported. See also :ref:`set_orient_threshold()<class_GDWiimote_method_set_orient_threshold>`.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_orient_threshold:

.. rst-class:: classref-method

|void| **set_orient_threshold**\ (\ threshold\: ``float``\ ) :ref:`🔗<class_GDWiimote_method_set_orient_threshold>`

Set a threshold used to determine when a change in the Wiimote's orientation is reported. The threshold indicates the decimal place that should be considered a significant change.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_set_rumble:

.. rst-class:: classref-method

|void| **set_rumble**\ (\ enabled\: ``bool``\ ) :ref:`🔗<class_GDWiimote_method_set_rumble>`

Set whether the rumble motor is enabled or disabled.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_start_gyro_calibration:

.. rst-class:: classref-method

|void| **start_gyro_calibration**\ (\ ) :ref:`🔗<class_GDWiimote_method_start_gyro_calibration>`

Start the calibration process for the Wiimote's gyroscope. The Wiimote must be kept still (probably on a flat surface) for a few seconds. The calibration must then be manually completed by calling :ref:`stop_gyro_calibration()<class_GDWiimote_method_stop_gyro_calibration>`.

\ **Note:** This requires enabling motion processing.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_start_nunchuk_joystick_calibration:

.. rst-class:: classref-method

|void| **start_nunchuk_joystick_calibration**\ (\ ) :ref:`🔗<class_GDWiimote_method_start_nunchuk_joystick_calibration>`

Start the calibration process for the Nunchuk's joystick. At the moment of calling this method, the Nunchuk's joystick should be centered and not moving. During the calibration process, the Nunchuk's joystick should be moved around to capture its range of motion. The calibration must then be manually completed by calling :ref:`stop_nunchuk_calibration()<class_GDWiimote_method_stop_nunchuk_calibration>`.

\ **Note:** This stops firing ``InputEventJoypadMotion`` until the calibration is complete.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_stop_gyro_calibration:

.. rst-class:: classref-method

|void| **stop_gyro_calibration**\ (\ ) :ref:`🔗<class_GDWiimote_method_stop_gyro_calibration>`

Stop the calibration process for the Wiimote's gyroscope.

\ **Note:** This requires enabling motion processing.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_stop_nunchuk_joystick_calibration:

.. rst-class:: classref-method

|void| **stop_nunchuk_joystick_calibration**\ (\ ) :ref:`🔗<class_GDWiimote_method_stop_nunchuk_joystick_calibration>`

Stop the calibration process for the Nunchuk's joystick. This should be called after :ref:`start_nunchuk_calibration()<class_GDWiimote_method_start_nunchuk_calibration>` to finalize the calibration data.

\ **Note:** This resumes firing ``InputEventJoypadMotion`` after the calibration is complete.

.. rst-class:: classref-item-separator

----

.. _class_GDWiimote_method_toggle_rumble:

.. rst-class:: classref-method

|void| **toggle_rumble**\ (\ ) :ref:`🔗<class_GDWiimote_method_toggle_rumble>`

Toggle the rumble motor on or off. If the rumble motor is currently enabled, it will be disabled, and vice versa.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |required| replace:: :abbr:`required (This method is required to be overridden when extending its base class.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
