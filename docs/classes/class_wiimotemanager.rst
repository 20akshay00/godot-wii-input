:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/../godot-wii-input/godot-wii-input/doc_classes/WiimoteManager.xml.

.. _class_WiimoteManager:

WiimoteManager
==============

**Inherits:** ``Node``

A manager for handling multiple Wiimote controllers.

.. rst-class:: classref-introduction-group

Description
-----------

The **WiimoteManager** node should be added as a global singleton (autoload) in your project settings in order to manage Wiimote interactions during the session. It handles connecting, disconnecting, and polling multiple Wiimotes, providing access to their features through the :ref:`GDWiimote<class_GDWiimote>` class.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +------------------+-----------------------------------------------------------------+-----------------------------------------------------------------+
   | ``int``          | :ref:`max_wiimotes<class_WiimoteManager_property_max_wiimotes>` | ``4``                                                           |
   +------------------+-----------------------------------------------------------------+-----------------------------------------------------------------+
   | Node.ProcessMode | process_mode                                                    | ``4`` (overrides :ref:`Node<class_Node_property_process_mode>`) |
   +------------------+-----------------------------------------------------------------+-----------------------------------------------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+
   | |void|                                                         | :ref:`connect_wiimotes<class_WiimoteManager_method_connect_wiimotes>`\ (\ )                     |
   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+
   | |void|                                                         | :ref:`disconnect_wiimotes<class_WiimoteManager_method_disconnect_wiimotes>`\ (\ )               |
   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`\[:ref:`GDWiimote<class_GDWiimote>`\] | :ref:`finalize_connection<class_WiimoteManager_method_finalize_connection>`\ (\ )               |
   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`\[:ref:`GDWiimote<class_GDWiimote>`\] | :ref:`get_connected_wiimotes<class_WiimoteManager_method_get_connected_wiimotes>`\ (\ ) |const| |
   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+
   | |void|                                                         | :ref:`start_polling<class_WiimoteManager_method_start_polling>`\ (\ )                           |
   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+
   | |void|                                                         | :ref:`stop_polling<class_WiimoteManager_method_stop_polling>`\ (\ )                             |
   +----------------------------------------------------------------+-------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_WiimoteManager_property_max_wiimotes:

.. rst-class:: classref-property

``int`` **max_wiimotes** = ``4`` :ref:`ðŸ”—<class_WiimoteManager_property_max_wiimotes>`

.. rst-class:: classref-property-setget

- |void| **set_max_wiimotes**\ (\ value\: ``int``\ )
- ``int`` **get_max_wiimotes**\ (\ )

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_WiimoteManager_method_connect_wiimotes:

.. rst-class:: classref-method

|void| **connect_wiimotes**\ (\ ) :ref:`ðŸ”—<class_WiimoteManager_method_connect_wiimotes>`

Initiate the connection process for Wiimotes. This method will search for available Wiimotes and connect them, allowing access to their features through the :ref:`GDWiimote<class_GDWiimote>` class. This must be followed by a call to :ref:`finalize_connection()<class_WiimoteManager_method_finalize_connection>` to complete the connection process and retrieve the connected Wiimotes.

\ **Linux:** Press 1+2 on each Wiimote after this method is called.

\ **Windows:** Pair the Wiimotes through Dolphin emulator or some other hidapi manager for Wii before calling this method.

\ **Note:** This method should be called only once at the start of the session. Subsequent calls will not reinitialize the connection process. This method is also blocking, so it may be prefered to call it in a separate thread.


.. tabs::

 .. code-tab:: gdscript

    func _ready():
        Thread.new().start(self, "_connect_wiimotes_thread")

    func _connect_wiimotes_thread():
        # Initialize loading screen
        # ... 

        WiimoteManager.connect_wiimotes()
        call_deferred("_on_connection_complete")

    func _on_connection_complete():
        # Hide loading screen
        # ...

        # Retrieve connected Wiimotes 
        var connected_wiimotes = WiimoteManager.finalize_connection()



.. rst-class:: classref-item-separator

----

.. _class_WiimoteManager_method_disconnect_wiimotes:

.. rst-class:: classref-method

|void| **disconnect_wiimotes**\ (\ ) :ref:`ðŸ”—<class_WiimoteManager_method_disconnect_wiimotes>`

Disconnect all currently connected Wiimotes. This will stop any ongoing polling and release resources associated with the Wiimotes.

.. rst-class:: classref-item-separator

----

.. _class_WiimoteManager_method_finalize_connection:

.. rst-class:: classref-method

:ref:`Array<class_Array>`\[:ref:`GDWiimote<class_GDWiimote>`\] **finalize_connection**\ (\ ) :ref:`ðŸ”—<class_WiimoteManager_method_finalize_connection>`

Finalize the connection process and return an array of connected :ref:`GDWiimote<class_GDWiimote>` instances. This method should be called after :ref:`connect_wiimotes()<class_WiimoteManager_method_connect_wiimotes>` to retrieve the connected Wiimotes. 

\ **Note:** This method is not blocking, so it may be called on the main thread.

.. rst-class:: classref-item-separator

----

.. _class_WiimoteManager_method_get_connected_wiimotes:

.. rst-class:: classref-method

:ref:`Array<class_Array>`\[:ref:`GDWiimote<class_GDWiimote>`\] **get_connected_wiimotes**\ (\ ) |const| :ref:`ðŸ”—<class_WiimoteManager_method_get_connected_wiimotes>`

Get an array of currently connected :ref:`GDWiimote<class_GDWiimote>` instances. This will include all Wiimotes that have been successfully connected and initialized.

.. rst-class:: classref-item-separator

----

.. _class_WiimoteManager_method_start_polling:

.. rst-class:: classref-method

|void| **start_polling**\ (\ ) :ref:`ðŸ”—<class_WiimoteManager_method_start_polling>`

Start polling the connected Wiimotes for input data. This will enable the Wiimotes to send updates about their state, such as button presses and motion data. ** Polling is enabled by default.**

.. rst-class:: classref-item-separator

----

.. _class_WiimoteManager_method_stop_polling:

.. rst-class:: classref-method

|void| **stop_polling**\ (\ ) :ref:`ðŸ”—<class_WiimoteManager_method_stop_polling>`

Stop polling the connected Wiimotes. This will pause the updates from the Wiimotes, preventing any further input data from being processed until polling is restarted with :ref:`start_polling()<class_WiimoteManager_method_start_polling>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |required| replace:: :abbr:`required (This method is required to be overridden when extending its base class.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
